services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    restart: always
    networks:
      - backend

  contracts:
    build:
      context: apps/indexer/contracts
      dockerfile: Dockerfile
    ports:
      - "8545:8545"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545", "-X", "POST", "-H", "Content-Type: application/json", "-d", "{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s

  indexer-db:
    image: postgres:16.2
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: postgres
    networks:
      - backend

  indexer:
    build:
      context: .
      dockerfile: docker/indexer/Dockerfile.indexer
    environment:
      - DATABASE_URL=postgres://postgres:admin@indexer-db:5432/postgres
      - DAO_ID=ENS
      - NETWORK=anvil
      - RPC_URL=http://contracts:8545
      - CHAIN_ID=31337
      - MAX_REQUESTS_PER_SECOND=10
      - POLLING_INTERVAL=1000
      - PORT=42069
    depends_on:
      indexer-db:
        condition: service_started
      contracts:
        condition: service_healthy
    ports:
      - "42069:42069"
    networks:
      - backend

  petition-db:
    image: postgres:16.2
    ports:
      - "5433:5432"
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    networks:
      - backend

  petition:
    build:
      context: .
      dockerfile: apps/petition/Dockerfile
    ports:
      - "3100:3100"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@petition-db:5432/postgres
      - PORT=3100
    depends_on:
      - petition-db
    networks:
      - backend

networks:
  backend:
    driver: bridge
