import { createSchema } from "@ponder/core";

export default createSchema((p) => ({
  DAO: p.createTable({
    id: p.string(),
    quorum: p.bigint().optional(),
    proposalThreshold: p.bigint().optional(),
    votingDelay: p.bigint().optional(),
    votingPeriod: p.bigint().optional(),
    timelockDelay: p.bigint().optional(),
    daoTokens: p.many("DAOToken.daoId"),
    accountPowers: p.many("AccountPower.daoId"),
  }),
  DAOToken: p.createTable({
      id: p.string(),
      daoId: p.string().references("DAO.id"),
      tokenId: p.string().references("Token.id"),
      dao: p.one("daoId"),
      token: p.one("tokenId"),
    }),
  Token: p.createTable({
    id: p.string(),
    name: p.string(),
    decimals: p.int(),
    totalSupply: p.bigint(),
    daoTokens: p.many("DAOToken.tokenId"),
    accountBalances: p.many("AccountBalance.tokenId"),
    transfers: p.many("Transfers.tokenId"),
  }),
  Account: p.createTable({
    id: p.string(),
    accountBalances: p.many("AccountBalance.accountId"),
    accountPowers: p.many("AccountPower.accountId"),
    votingPowerHistory: p.many("VotingPowerHistory.accountId"),
    delegateeDelegations: p.many("Delegations.delegateeAccountId"),
    delegatorDelegations: p.many("Delegations.delegatorAccountId"),
    transfersFrom: p.many("Transfers.fromAccountId"),
    transfersTo: p.many("Transfers.toAccountId"),
    votesOnchain: p.many("VotesOnchain.voterAccountId"),
    proposalsOnchain: p.many("ProposalsOnchain.proposerAccountId"),
  }),
  AccountBalance: p.createTable({
    id: p.string(),
    tokenId: p.string().references("Token.id"),
    accountId: p.string().references("Account.id"),
    balance: p.bigint(),
    token: p.one("tokenId"),
    account: p.one("accountId"),
  }),
  AccountPower: p.createTable({
    id: p.string(),
    accountId: p.string().references("Account.id"),
    daoId: p.string().references("DAO.id"),
    votingPower: p.bigint().optional(),
    votesCount: p.int().optional(),
    proposalsCount: p.int().optional(),
    delegationsCount: p.int().optional(),
    delegate: p.string().optional(),
    account: p.one("accountId"),
    dao: p.one("daoId"),
  }),
  VotingPowerHistory: p.createTable({
    id: p.string(),
    daoId: p.string().references("DAO.id"),
    accountId: p.string().references("Account.id"),
    votingPower: p.bigint(),
    timestamp: p.bigint(),
    dao: p.one("daoId"),
    account: p.one("accountId"),
  }),
  Delegations: p.createTable({
    id: p.string(),
    daoId: p.string().references("DAO.id"),
    delegateeAccountId: p.string().references("Account.id"),
    delegatorAccountId: p.string().references("Account.id"),
    timestamp: p.bigint(),
    dao: p.one("daoId"),
    delegateeAccount: p.one("delegateeAccountId"),
    delegatorAccount: p.one("delegatorAccountId"),
  }),
  Transfers: p.createTable({
    id: p.string(),
    daoId: p.string().references("DAO.id"),
    tokenId: p.string().references("Token.id"),
    amount: p.bigint(),
    fromAccountId: p.string().references("Account.id"),
    toAccountId: p.string().references("Account.id"),
    timestamp: p.bigint(),
    fromAccount: p.one("fromAccountId"),
    toAccount: p.one("toAccountId"),
    dao: p.one("daoId"),
    token: p.one("tokenId"),
  }),
  VotesOnchain: p.createTable({
    id: p.string(),
    daoId: p.string().references("DAO.id"),
    voterAccountId: p.string().references("Account.id"),
    proposalId: p.string().references("ProposalsOnchain.id"),
    support: p.string(),
    weight: p.string(),
    reason: p.string(),
    timestamp: p.bigint(),
    dao: p.one("daoId"),
    voterAccount: p.one("voterAccountId"),
    proposal: p.one("proposalId"),
  }),
  ProposalsOnchain: p.createTable({
    id: p.string(),
    daoId: p.string().references("DAO.id"),
    proposerAccountId: p.string().references("Account.id"),
    targets: p.json(),
    values: p.json(),
    signatures: p.json(),
    calldatas: p.json(),
    startBlock: p.string(),
    endBlock: p.string(),
    description: p.string(),
    timestamp: p.bigint(),
    status: p.string(),
    forVotes: p.bigint(),
    againstVotes: p.bigint(),
    abstainVotes: p.bigint(),
    dao: p.one("daoId"),
    proposerAccount: p.one("proposerAccountId"),
    votes: p.many("VotesOnchain.proposalId"),
  }),
}));
